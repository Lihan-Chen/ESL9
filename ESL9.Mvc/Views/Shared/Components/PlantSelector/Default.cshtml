@model List<FacilSelectViewModel>

 <div class="card-body">
    <form method="post" asp-action="SetPlant" asp-controller="Home">
        <fieldset>
            <legend>@ViewData["Title"]</legend>

            <div class="plant-selector">
                @foreach (var plant in Model)
                {
                    <div class="plant-button @(plant.IsSelected ? "selected" : "")"
                            data-plant-id="@plant.FacilNo"
                            data-plant-name="@plant.FacilName"
                            role="button"
                            tabindex="0">
                        <span class="plant-name">@plant.FacilName</span>
                    </div>
                }
            </div>

            <!-- Hidden field actually posted -->
            <input type="hidden" id="selectedPlant" name="selectedFacilNo"
                    value="@Model.FirstOrDefault(p => p.IsSelected)?.FacilNo" />

            <!-- Readonly textbox showing current selection -->
            <div class="mt-3">
                <label for="selectedPlantDisplay" class="form-label">Selected Facility</label>
                <input type="text"
                        id="selectedPlantDisplay"
                        class="form-control"
                        value="@(Model.FirstOrDefault(p => p.IsSelected)?.FacilName ?? "None")"
                        readonly />
            </div>

        </fieldset>

        <div class="form-check form-switch mt-3 text-center">
            <input type="checkbox"
                   class="form-check-input"
                   role="switch"
                   id="rememberMe"
                   name="rememberMe"
                   value="true" />
            <label class="form-check-label" for="rememberMe">Remember Me</label>
        </div>

        @if (!string.IsNullOrEmpty(ViewBag.ReturnUrl))
        {
            <input type="hidden" name="returnUrl" value="@ViewBag.ReturnUrl" />
        }

        <div class="text-center mt-4">
            <button type="submit" class="btn btn-primary" id="confirm">Confirm </button>

            @if (!string.IsNullOrEmpty(ViewBag.ReturnUrl))
            {
                <a href="@ViewBag.ReturnUrl" class="btn btn-secondary ml-2">Cancel</a>
            }
        </div>
    </form>
</div>

<style>
    .plant-selector {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        justify-content: center;
        padding: 1rem;
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 0.25rem;
        margin-bottom: 0.5rem;
    }

    .plant-button {
        /* background-color: #f8f9fa;
        border: 2px solid #dee2e6;
        border-radius: 8px;
        padding: 1rem 2rem;
        cursor: pointer;
        transition: all 0.2s ease-in-out;
        min-width: 120px;
        text-align: center; */
        border: thin outset #FFFF99;
        border: 2px solid #dee2e6;
        border-radius: 8px;
        padding: 1rem 1rem;
        cursor: pointer;
        font-size: 0.875rem;
        text-align: center;
        background-color: #C0C0C0;
        width: 120px;
        height: 50px;
        display: inline-block;
        vertical-align: middle;
        float: left;
        margin-right: 10px;
        margin-left: 10px;
        margin-top: 10px;
        /* padding-top: 20px; */
        font-weight: 500;
    }

        .plant-button:hover {
            /* background-color: #e9ecef; */
            transform: translateY(-2px);
            background: lightgreen;
            font-size: 1em;
            /*color:  #00FFFF; */
            /* list-style-type: square; */
        }

        .plant-button.selected {
            /* background-color: #0d6efd;
            color: white;
            border-color: #0d6efd; */
            background: #FFCC00;
            color: orangered;
            font-size: 1.1em;
            /* list-style-type: square; */
        }

    .plant-name {
        font-weight: 500;
        font-size: 0.9rem;
    }

    /* Accessibility focus styles */
    .plant-button:focus {
        outline: 3px solid #86b7fe;
        outline-offset: 2px;
    }    
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const plantButtons = document.querySelectorAll('.plant-button');
        const hiddenInput = document.getElementById('selectedPlant');
        const confirmButton = document.getElementById('confirm');

        plantButtons.forEach(button => {
            button.addEventListener('click', function() {
                // Remove selected class from all buttons
                plantButtons.forEach(b => b.classList.remove('selected'));

                // Add selected class to clicked button
                this.classList.add('selected');

                confirm.content += this.content;

                // Update hidden input value(hiddenInput = selectedPlant)
                hiddenInput.value = this.dataset.plantId;

                // Trigger change event for form handling
                const event = new Event('plantSelected');
                document.dispatchEvent(event);
            });

            // Keyboard accessibility
            button.addEventListener('keypress', function(e) {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    this.click();
                }
            });
        });
    });
</script>
